/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.luyi.umusic.web.action;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.luyi.umusic.model.Music;
import com.luyi.umusic.model.PhotoSet;
import com.luyi.umusic.service.impl.UMusicManagerImpl;
import com.luyi.umusic.service.impl.ComparatorUser;
import com.luyi.umusic.web.ShareMForm;


/** 
 * MyEclipse Struts
 * Creation date: 12-09-2013
 * 
 * XDoclet definition:
 * @struts.action path="/shareM" name="shareMForm" input="/form/shareM.jsp" scope="request" validate="true"
 * @struts.action-forward name="fail" path="/share.jsp"
 * @struts.action-forward name="MusicLib" path="/musiclib.jsp"
 */
public class ShareMAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	UMusicManagerImpl uMusicManagerImpl;
	List collectlist = new ArrayList();
	
	public UMusicManagerImpl getUMusicManagerImpl()
	{
		return uMusicManagerImpl;
	}
	
	public void setUMusicManagerImpl(UMusicManagerImpl uMusicManagerImpl)
	{
		this.uMusicManagerImpl = uMusicManagerImpl;
	}
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward save(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ShareMForm shareMForm = (ShareMForm) form;// TODO Auto-generated method stub
		SimpleDateFormat sdf = new SimpleDateFormat("MM-dd hh:mm:ss");  
		String date = sdf.format(new java.util.Date()); 
		
		Music m = new Music();
		m.setMusicTitle(shareMForm.getmusicTitle());
		m.setMusicType(shareMForm.getMusicType());
		m.setSinger(shareMForm.getSinger());
		m.setMusicPath(request.getRealPath("/") + "UserData\\UserPhoto\\"
						+ shareMForm.getmusicTitle());
		int id = Integer.parseInt(request.getSession().getAttribute("userId").toString());
		m.setUserId(id);
		m.setMusicDcpt(shareMForm.getMusicDcpt());
		m.setMusicState(1);
		m.setReadedCount(0);
		m.setFeedbackCount(0);
		m.setFeedbackSetting(1);
		m.setPubTime(date);
		
		if(uMusicManagerImpl.shareM(m))
		{
			return list(mapping, form, request, response);
		}
		else
		{
			return mapping.findForward("umusic.share.music");
		}
	}
	
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int id = Integer.parseInt(request.getParameter("musicId"));
		uMusicManagerImpl.deleteM(id);
		return list(mapping, form, request, response);
	}
	
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		if(request.getSession().getAttribute("userId") != null)
		{
			int id = Integer.parseInt(request.getSession().getAttribute("userId").toString());
			List musiclist = uMusicManagerImpl.findUserMusic(id);
			request.getSession().setAttribute("musiclist", musiclist);
		}
		return mapping.findForward("umusic.musiclib");
	}
	
	public ActionForward all(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List musiclist = uMusicManagerImpl.findAllMusic();
		
		request.getSession().setAttribute("musiclist", musiclist);
		sort(mapping, form, request, response);
		news(mapping, form, request, response);
		return mapping.findForward("umusic.readfeed");
	}
	
	public ActionForward sort(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List musiclist = uMusicManagerImpl.findAllMusic();
		ComparatorUser comparator=new ComparatorUser();
		Collections.sort(musiclist, comparator);
		Collections.reverse(musiclist);
		request.getSession().setAttribute("musiclistorder", musiclist);
		return mapping.findForward("/");
	}
	
	public ActionForward news(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List musiclist = uMusicManagerImpl.findAllMusic();
		List newlist = new ArrayList();
		SimpleDateFormat sdf = new SimpleDateFormat("MM-dd");  
		String date = sdf.format(new java.util.Date());
		Iterator musicitr = musiclist.iterator();
		while(musicitr.hasNext())
		{
			Music m = (Music)musicitr.next();
			if(m.getPubTime() != null)
			{
				if(date.equals(m.getPubTime().substring(0, m.getPubTime().indexOf(" "))))
				{
					newlist.add(m);
				}
			}
		}
		request.getSession().setAttribute("musiclistnew", newlist);
		return mapping.findForward("/");
	}
	
	public ActionForward sourch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		return mapping.findForward("umusic.home");
	}
	
	public ActionForward read(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int id = Integer.parseInt(request.getParameter("musicId"));
		Music m = uMusicManagerImpl.findMusicById(id);
		m.setReadedCount(m.getReadedCount()+1);
		uMusicManagerImpl.update(m);
		
		all(mapping, form, request, response);
		return mapping.findForward("umusic.home");
	}
	
	public ActionForward feedback(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int musicId = Integer.parseInt(request.getParameter("musicId"));
		int userId = Integer.parseInt(request.getSession().getAttribute("userId").toString());
		Music m = uMusicManagerImpl.findMusicById(musicId);
		m.setFeedbackCount(m.getFeedbackCount()+1);
		uMusicManagerImpl.update(m);
		
		collectlist.add(m);
		request.getSession().setAttribute("musiclistcollect", collectlist);
		
		all(mapping, form, request, response);
		return mapping.findForward("umusic.home");
	}
}